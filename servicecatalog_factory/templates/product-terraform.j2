AWSTemplateFormatVersion: '2010-09-09'
Description: |
  {{friendly_uid}}
  {"version": "{{ FACTORY_VERSION }}", "framework": "servicecatalog-factory", "role": "product-pipeline", "type": "terraform"}

Parameters:
  Version:
    Type: String
    Default: "{{ FACTORY_VERSION }}"

Resources:
  Param:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/service-catalog-factory/${AWS::StackName}/version"
      Type: String
      Value: !Ref Version

{% if Source.Provider.lower() == 'codecommit' and Source.Configuration.get('PollForSourceChanges', 'FALSE').upper() == 'FALSE' %}
  PipeLineEventTrigger:
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub "triggers ${AWS::StackName}-pipeline"
      EventPattern:
        source:
          - "aws.codecommit"
        detail-type:
          - "CodeCommit Repository State Change"
        resources:
          - !Sub "arn:${AWS::Partition}:codecommit:${AWS::Region}:${AWS::AccountId}:{{ Source.Configuration.RepositoryName }}"
        detail:
          event:
            - "referenceCreated"
            - "referenceUpdated"
          referenceType:
            - branch
          referenceName:
            - "{{ Source.Configuration.BranchName }}"
      State: ENABLED
      Targets:
        - Arn: !Sub "arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${AWS::StackName}-pipeline"
          Id: "sc-pipeline"
          RoleArn: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/servicecatalog-product-factory/CodePipelineTriggerRole"
{% endif %}

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/servicecatalog-product-factory/DeliveryCodePipelineRole"
      Name: !Sub "${AWS::StackName}-pipeline"
      Tags:
        - Key: "ServiceCatalogFactory:Actor"
          Value: "Generated"
{% for tag in tags %}
        - Key: "{{ tag.get("Key") }}"
          Value: "{{ tag.get("Value") }}"
{% endfor %}
      ArtifactStores:
      {% for region in ALL_REGIONS %}
        - Region: {{ region }}
          ArtifactStore:
            Type: S3
            Location: !Sub "sc-factory-artifacts-${AWS::AccountId}-{{ region }}"
      {% endfor %}

      RestartExecutionOnUpdate: false
      Stages:
        - Name: Source
          Actions:

            {% if Source.Provider.lower() == 'codestarsourceconnection' %}

            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: '1'
              Configuration:
                BranchName: {{ Source.Configuration.BranchName }}
                ConnectionArn: {{ Source.Configuration.ConnectionArn }}
                FullRepositoryId: {{ Source.Configuration.FullRepositoryId }}
                OutputArtifactFormat: CODE_ZIP
              OutputArtifacts:
                - Name: Source
              RunOrder: '1'

            {% elif Source.Provider.lower() == 's3' %}

            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: '1'
              Configuration:
                S3Bucket: !Sub "{{ Source.Configuration.BucketName }}"
                S3ObjectKey: !Sub "{{ Source.Configuration.S3ObjectKey }}"
              OutputArtifacts:
                - Name: Source
              RunOrder: '1'

              {% else %}

            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: {% if Source.Provider.lower() == 'codecommit' %}AWS{% else %}ThirdParty{% endif %}
                Version: 1
                Provider: {{ Source.Provider }}
              {% if Source.Provider.lower() == 'codecommit' %}Configuration:
                RepositoryName: {{ Source.Configuration.RepositoryName }}
                BranchName: {{ Source.Configuration.BranchName }}
                PollForSourceChanges: {{ Source.Configuration.PollForSourceChanges or 'false' }}{% endif %}
              {% if Source.Provider.lower() == 'github' %}Configuration:
                Owner: {{ Source['Configuration']['Owner'] }}
                Repo: {{ Source['Configuration']['Repo'] }}
                Branch: {{ Source['Configuration']['Branch'] }}
                OAuthToken: !Sub '{{ '{% raw %}{{{% endraw %}' }}resolve:secretsmanager:{{ Source['Configuration']['SecretsManagerSecret'] }}:SecretString:OAuthToken{{ '{% raw %}}}{% endraw %}' }}'
                PollForSourceChanges: {{ Source['Configuration']['PollForSourceChanges'] }}{% endif %}
              OutputArtifacts:
                - Name: Source
              RunOrder: 1
              {% if Source.Provider.lower() == 'aws' %}RoleArn: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/servicecatalog-product-factory/DeliverySourceRole"{% endif %}

            {% endif %}
        - Name: Package
          Actions:
            - Name: Package
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref PackageProject
              RunOrder: 1
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: Package

        - Name: Deploy
          Actions:
          {% for region in ALL_REGIONS %}
            - Name: Deploy-{{region}}
              Region: {{ region }}
              InputArtifacts:
                - Name: Package
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: ServiceCatalog
                Version: '1'
              Configuration:
                TemplateFilePath: product.template-{{ region }}.yaml
                ProductVersionName: {{ version.Name }}
                ProductType: CLOUD_FORMATION_TEMPLATE{% if version.Description %}
                ProductVersionDescription: {{ version.Description }}{% endif %}
                ProductId: {{ product_ids_by_region[region] }}
          {% endfor %}


  {% if Source.Provider.lower() == 'github' %}Webhook:
    Type: 'AWS::CodePipeline::Webhook'
    Properties:
      AuthenticationConfiguration:
        SecretToken: !Sub '{{ '{% raw %}{{{% endraw %}' }}resolve:secretsmanager:{{ Source['Configuration']['SecretsManagerSecret'] }}:SecretString:SecretToken{{ '{% raw %}}}{% endraw %}' }}'
      Filters:
      - JsonPath: "$.ref"
        MatchEquals: "refs/heads/{{ Source.Configuration.Branch }}"
      Authentication: GITHUB_HMAC
      TargetPipeline: !Ref Pipeline
      TargetAction: Source
      Name: !Sub "${AWS::StackName}-webhook"
      TargetPipelineVersion: !GetAtt Pipeline.Version
      RegisterWithThirdParty: 'true'
{% endif %}

  PackageProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${AWS::StackName}-PackageProject"
      Tags:
        - Key: "ServiceCatalogFactory:Actor"
          Value: "Generated"
{% for tag in tags %}
        - Key: "{{ tag.get("Key") }}"
          Value: "{{ tag.get("Value") }}"
{% endfor %}
      ServiceRole: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/servicecatalog-product-factory/DeliveryCodeRole"
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: linuxContainer
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        EnvironmentVariables:
          - Name: STACK_NAME
            Type: PLAINTEXT
            Value: !Sub "${AWS::StackName}"
          - Name: ACCOUNT_ID
            Type: PLAINTEXT
            Value: !Sub "${AWS::AccountId}"
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
            version: 0.2
            phases:
              install:
                runtime-versions:
                  python: 3.8
                commands:
  {% if 'http' in FACTORY_VERSION %}
                  - pip install {{ FACTORY_VERSION }}
  {% else %}
                  - pip install aws-service-catalog-factory=={{ FACTORY_VERSION }}
  {% endif %}
              build:
                commands:
                  - zip -r tf.zip tf/
                {% for region in ALL_REGIONS %}
                  - servicecatalog-factory generate-terraform-template ${STACK_NAME} {{ version.Provisioner.Version }} {{ TF_VARS }} > product.template-{{ region }}.yaml
                  - aws s3 cp tf.zip s3://sc-factory-artifacts-${ACCOUNT_ID}-{{ region }}/${STACK_NAME}/
                {% endfor %}
            artifacts:
              files:
                - '*'
                - '**/*'

      TimeoutInMinutes: 20

Outputs:
  Version:
    Value: !GetAtt Param.Value