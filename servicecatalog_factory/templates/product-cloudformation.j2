AWSTemplateFormatVersion: '2010-09-09'
Description: |
  {{friendly_uid}}
  {"version": "{{ FACTORY_VERSION }}", "framework": "servicecatalog-factory", "role": "product-pipeline", "type": "cloudformation"}

Resources:

{% if Options.ShouldCFNNag %}{% include 'tests/CFNNagBuildProject.j2' %}{% endif %}
{% if Options.ShouldCloudformationRSpec %}{% include 'tests/CloudformationRSpecProject.j2' %}{% endif %}

{% if Source.Provider.lower() == 'codecommit' and Source.Configuration.get('PollForSourceChanges', 'FALSE').upper() == 'FALSE' %}
  PipeLineEventTrigger:
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub "triggers ${AWS::StackName}-pipeline"
      EventPattern:
        source:
          - "aws.codecommit"
        detail-type:
          - "CodeCommit Repository State Change"
        resources:
          - !Sub "arn:${AWS::Partition}:codecommit:${AWS::Region}:${AWS::AccountId}:{{ Source.Configuration.RepositoryName }}"
        detail:
          event:
            - "referenceCreated"
            - "referenceUpdated"
          referenceType:
            - branch
          referenceName:
            - "{{ Source.Configuration.BranchName }}"
      State: ENABLED
      Targets:
        - Arn: !Sub "arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${AWS::StackName}-pipeline"
          Id: "sc-pipeline"
          RoleArn: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/servicecatalog-product-factory/CodePipelineTriggerRole"
{% endif %}

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/servicecatalog-product-factory/DeliveryCodePipelineRole"
      Name: !Sub "${AWS::StackName}-pipeline"
      Tags:
        - Key: "ServiceCatalogFactory:Actor"
          Value: "Generated"
{% for tag in tags %}
        - Key: "{{ tag.get("Key") }}"
          Value: "{{ tag.get("Value") }}"
{% endfor %}

  {% if CAN_USE_CODE_PIPELINE == "True" %}
      ArtifactStores:
  {% for region in ALL_REGIONS %}
        - Region: {{ region }}
          ArtifactStore:
            Type: S3
            Location: !Sub "sc-factory-artifacts-${AWS::AccountId}-{{ region }}"
  {% endfor %}
  {% else %}
      ArtifactStore:
        Type: S3
        Location: !Sub "sc-factory-artifacts-${AWS::AccountId}-${AWS::Region}"

  {% endif %}
      RestartExecutionOnUpdate: false
      Stages:
        - Name: Source
          Actions:

            {% if Source.Provider.lower() == 'codestarsourceconnection' %}

            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: '1'
              Configuration:
                BranchName: {{ Source.Configuration.BranchName }}
                ConnectionArn: {{ Source.Configuration.ConnectionArn }}
                FullRepositoryId: {{ Source.Configuration.FullRepositoryId }}
                OutputArtifactFormat: CODE_ZIP
              OutputArtifacts:
                - Name: Source
              RunOrder: '1'

            {% elif Source.Provider.lower() == 's3' %}

            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: '1'
              Configuration:
                S3Bucket: !Sub "{{ Source.Configuration.BucketName }}"
                S3ObjectKey: !Sub "{{ Source.Configuration.S3ObjectKey }}"
              OutputArtifacts:
                - Name: Source
              RunOrder: '1'

            {% elif Source.Provider.lower() == 'custom' %}
              
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: Custom
                Version: {{ Source.Configuration.CustomActionTypeVersion }}
                Provider: {{ Source.Configuration.CustomActionTypeProvider }}
              Configuration:
                GitUrl: {{ Source.Configuration.GitUrl }}
                Branch: {{ Source.Configuration.Branch }}
                PipelineName: !Sub "${AWS::StackName}-pipeline"
              OutputArtifacts:
                - Name: Source
              RunOrder: 1

              {% else %}

            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: {% if Source.Provider.lower() == 'codecommit' %}AWS{% else %}ThirdParty{% endif %}
                Version: 1
                Provider: {{ Source.Provider }}
              {% if Source.Provider.lower() == 'codecommit' %}Configuration:
                RepositoryName: {{ Source.Configuration.RepositoryName }}
                BranchName: {{ Source.Configuration.BranchName }}
                PollForSourceChanges: {{ Source.Configuration.PollForSourceChanges or 'false' }}{% endif %}
              {% if Source.Provider.lower() == 'github' %}Configuration:
                Owner: {{ Source['Configuration']['Owner'] }}
                Repo: {{ Source['Configuration']['Repo'] }}
                Branch: {{ Source['Configuration']['Branch'] }}
                OAuthToken: !Sub '{{ '{% raw %}{{{% endraw %}' }}resolve:secretsmanager:{{ Source['Configuration']['SecretsManagerSecret'] }}:SecretString:OAuthToken{{ '{% raw %}}}{% endraw %}' }}'
                PollForSourceChanges: {{ Source['Configuration']['PollForSourceChanges'] }}{% endif %}
              OutputArtifacts:
                - Name: Source
              RunOrder: 1
              {% if Source.Provider.lower() == 'aws' %}RoleArn: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/servicecatalog-product-factory/DeliverySourceRole"{% endif %}

            {% endif %}


{% if Options.ShouldParseAsJinja2Template %}
        - Name: Parse
          Actions:
            - Name: Parse
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref ParseProject
              RunOrder: 1
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: Parse
{% else %}
  {% if Stages.get("Build", {}).get("BuildSpec") %}
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref BuildProject
              RunOrder: 1
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: Build
  {% endif %}
{% endif %}
        - Name: Tests
          Actions:
            - Name: Validate
              ActionTypeId:
                Category: Test
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: ServiceCatalog-Factory-SharedValidate
                EnvironmentVariables: '[{"name":"TEMPLATE_FORMAT","value":"{{ template_format }}","type":"PLAINTEXT"}, {"name":"SOURCE_PATH","value":"{{ Source.get("Path", ".") }}","type":"PLAINTEXT"}]'
              RunOrder: 1
              InputArtifacts:
              {% if Options.ShouldParseAsJinja2Template %}
              - Name: Parse
              {% else %}
              {% if Stages.get("Build", {}).get("BuildSpec") %}
              - Name: Build
              {% else %}
              - Name: Source
              {% endif %}
              {% endif %}
              OutputArtifacts:
                - Name: Test{{ action }}
{% if Options.ShouldCFNNag %}{% with action="CFNNag", ShouldParseAsJinja2Template=Options.ShouldParseAsJinja2Template %}{% include 'test-action.j2' %}{% endwith %}{% endif %}
{% if Options.ShouldCloudformationRSpec %}{% with action="CloudformationRSpec", ShouldParseAsJinja2Template=Options.ShouldParseAsJinja2Template %}{% include 'test-action.j2' %}{% endwith %}{% endif %}
{% for test_name, test_details in Stages.get("Tests", {}).items() %}
            - Name: {{ test_name }}
              ActionTypeId:
                Category: Test
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref TestProject{{ test_name }}
              RunOrder: 1
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: {{ test_name }}
{% endfor %}
        - Name: Package
          Actions:
            - Name: Package
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref PackageProject
                EnvironmentVariables: !Sub '[{"name":"PROVISIONER","value":"cloudformation","type":"PLAINTEXT"},{"name":"PIPELINE_NAME","value":"${AWS::StackName}-pipeline","type":"PLAINTEXT"},{"name":"TEMPLATE_FORMAT","value":"{{ template_format }}","type":"PLAINTEXT"},{"name":"CODEPIPELINE_ID","value":"#{codepipeline.PipelineExecutionId}","type":"PLAINTEXT"},{"name":"NAME","value":"{{ product.Name }}","type":"PLAINTEXT"},{"name":"VERSION","value":"{{ version.Name }}","type":"PLAINTEXT"},{"name":"DESCRIPTION","value":"{{ version.Description | replace("'", "\'") }}","type":"PLAINTEXT"},{"name":"SOURCE_PATH","value":"{{ Source.get("Path", ".") }}","type":"PLAINTEXT"}]'

              RunOrder: 1
              InputArtifacts:
              {% if Options.ShouldParseAsJinja2Template %}
                - Name: Parse
              {% else %}
                {% if Stages.get("Build", {}).get("BuildSpec") %}
                - Name: Build
                {% else %}
                - Name: Source
                {% endif %}
              {% endif %}
              OutputArtifacts:
                - Name: Package

        - Name: Deploy
          Actions:
            {% if CAN_USE_CODE_PIPELINE == "True" %}
            {% for region in ALL_REGIONS %}
            - Name: Deploy-{{region}}
              Region: {{ region }}
              InputArtifacts:
                - Name: Package
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: ServiceCatalog
                Version: '1'
              Configuration:
                TemplateFilePath: {% if Source.get("Path") %}{{ Source.get("Path", "") }}/{% endif %}product.template-{{ region }}.{{ template_format }}
                ProductVersionName: {{ version.Name }}
                ProductType: CLOUD_FORMATION_TEMPLATE{% if version.Description %}
                ProductVersionDescription: {{ version.Description }}{% endif %}
                ProductId: {{ product_ids_by_region[region] }}
            {% endfor %}
            {% else %}
            - Name: Deploy
              InputArtifacts:
                - Name: Package
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: ServiceCatalog-Factory-SharedDeployInGovCloud
                EnvironmentVariables: !Sub '[{"name":"PIPELINE_NAME","value":"${AWS::StackName}-pipeline","type":"PLAINTEXT"},{"name":"CODEPIPELINE_ID","value":"#{codepipeline.PipelineExecutionId}","type":"PLAINTEXT"}, {"name":"SOURCE_PATH","value":"{{ Source.get("Path", ".") }}","type":"PLAINTEXT"}]'
            {% endif %}

  {% if Source.Provider.lower() == 'github' %}Webhook:
    Type: 'AWS::CodePipeline::Webhook'
    Properties:
      AuthenticationConfiguration:
        SecretToken: !Sub '{{ '{% raw %}{{{% endraw %}' }}resolve:secretsmanager:{{ Source['Configuration']['SecretsManagerSecret'] }}:SecretString:SecretToken{{ '{% raw %}}}{% endraw %}' }}'
      Filters:
      - JsonPath: "$.ref"
        MatchEquals: "refs/heads/{{ Source.Configuration.Branch }}"
      Authentication: GITHUB_HMAC
      TargetPipeline: !Ref Pipeline
      TargetAction: Source
      Name: !Sub "${AWS::StackName}-webhook"
      TargetPipelineVersion: !GetAtt Pipeline.Version
      RegisterWithThirdParty: 'true'
{% endif %}

  {% if Source.Provider.lower() == 'custom' and Source.Configuration.GitWebHookIpAddress is defined %}
  Webhook:
    Type: "AWS::CodePipeline::Webhook"
    Properties:
      Authentication: IP
      AuthenticationConfiguration:
        AllowedIPRange: {{ Source.Configuration.GitWebHookIpAddress }}
      Filters:
        - JsonPath: '$.changes[0].ref.id'
          MatchEquals: 'refs/heads/{Branch}'     
      TargetPipeline: !Ref Pipeline
      TargetPipelineVersion: !GetAtt Pipeline.Version
      TargetAction: Source
      Name: !Sub "${AWS::StackName}-webhook"
      RegisterWithThirdParty: false
{% endif %}


  PackageProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${AWS::StackName}-PackageProject"
      ServiceRole: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/servicecatalog-product-factory/DeliveryCodeRole"
      Tags:
        - Key: "ServiceCatalogFactory:Actor"
          Value: "Generated"
{% for tag in tags %}
        - Key: "{{ tag.get("Key") }}"
          Value: "{{ tag.get("Value") }}"
{% endfor %}
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: linuxContainer
        ComputeType: BUILD_GENERAL1_SMALL
        Image: {{ Stages.get("Package", {}).get("BuildSpecImage", product.get("BuildSpecImage", "aws/codebuild/standard:4.0")) }}
        EnvironmentVariables:
          - Name: STACK_NAME
            Type: PLAINTEXT
            Value: !Sub "${AWS::StackName}"
          - Name: ACCOUNT_ID
            Type: PLAINTEXT
            Value: !Sub "${AWS::AccountId}"
          - Name: CODEPIPELINE_ID
            Type: PLAINTEXT
            Value: "CHANGE_ME"
          - Name: PROVISIONER
            Type: PLAINTEXT
            Value: "CHANGE_ME"
          - Name: SOURCE_PATH
            Type: PLAINTEXT
            Value: "."
      Source:
        Type: CODEPIPELINE
        {% if Stages.get("Package", {}).get("BuildSpec") %}
        BuildSpec: |
{{ Stages.get("Package", {}).get("BuildSpec")|indent(12,true) }}
        {% else %}
        BuildSpec: |
            version: 0.2
            phases:
              install:
                runtime-versions:
                  python: 3.8
              build:
                commands:
                  - cd $SOURCE_PATH
                {% for region in ALL_REGIONS %}
                  - aws cloudformation package --region {{ region }} --template $(pwd)/product.template.{{ template_format }} --s3-bucket sc-factory-artifacts-${ACCOUNT_ID}-{{ region }} --s3-prefix ${STACK_NAME} --output-template-file product.template-{{ region }}.{{ template_format }}
                {% endfor %}
            artifacts:
              files:
                - '*'
                - '**/*'
        {% endif %}
      TimeoutInMinutes: 20


  {% if Stages.get("Build", {}).get("BuildSpec") %}
  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${AWS::StackName}-BuildProject"
      ServiceRole: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/servicecatalog-product-factory/DeliveryCodeRole"
      Tags:
        - Key: "ServiceCatalogFactory:Actor"
          Value: "Generated"
          {% for tag in tags %}
        - Key: "{{ tag.get("Key") }}"
          Value: "{{ tag.get("Value") }}"
          {% endfor %}
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: linuxContainer
        ComputeType: BUILD_GENERAL1_SMALL
        Image: {{ Stages.get("Build", {}).get("BuildSpecImage", product.get("BuildSpecImage", "aws/codebuild/standard:4.0")) }}
        EnvironmentVariables:
          - Name: STACK_NAME
            Type: PLAINTEXT
            Value: !Sub "${AWS::StackName}"
          - Name: ACCOUNT_ID
            Type: PLAINTEXT
            Value: !Sub "${AWS::AccountId}"
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
{{ Stages.get("Build", {}).get("BuildSpec")|indent(12,true) }}
      TimeoutInMinutes: 20
  {% endif %}

  {% for test_name, test_details in Stages.get("Tests", {}).items() %}
  TestProject{{ test_name }}:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${AWS::StackName}-{{ test_name }}"
      ServiceRole: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/servicecatalog-product-factory/DeliveryCodeRole"
      Tags:
        - Key: "ServiceCatalogFactory:Actor"
          Value: "Generated"
          {% for tag in tags %}
        - Key: "{{ tag.get("Key") }}"
          Value: "{{ tag.get("Value") }}"
          {% endfor %}
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: linuxContainer
        ComputeType: BUILD_GENERAL1_SMALL
        Image: {{ test_details.get("BuildSpecImage", "aws/codebuild/standard:4.0") }}
        EnvironmentVariables:
          - Name: STACK_NAME
            Type: PLAINTEXT
            Value: !Sub "${AWS::StackName}"
          - Name: ACCOUNT_ID
            Type: PLAINTEXT
            Value: !Sub "${AWS::AccountId}"
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
{{ test_details.get("BuildSpec")|indent(12,true) }}
      TimeoutInMinutes: 480
  {% endfor %}


{% if Options.ShouldParseAsJinja2Template %}
  ParseProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${AWS::StackName}-ParseProject"
      ServiceRole: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/servicecatalog-product-factory/DeliveryCodeRole"
      Tags:
        - Key: "ServiceCatalogFactory:Actor"
          Value: "Generated"
{% for tag in tags %}
        - Key: "{{ tag.get("Key") }}"
          Value: "{{ tag.get("Value") }}"
{% endfor %}
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: linuxContainer
        ComputeType: BUILD_GENERAL1_SMALL
        {% if version.BuildSpecImage %}
        Image: {{ version.BuildSpecImage }}
        {% else %}
        {% if product.BuildSpecImage %}
        Image: {{ product.BuildSpecImage }}
        {% else %}
        Image: aws/codebuild/standard:4.0
        {% endif %}
        {% endif %}
        EnvironmentVariables:
          - Name: STACK_NAME
            Type: PLAINTEXT
            Value: !Sub "${AWS::StackName}"
          - Name: ACCOUNT_ID
            Type: PLAINTEXT
            Value: !Sub "${AWS::AccountId}"
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
            version: 0.2
            phases:
              install:
                runtime-versions:
                  python: 3.8
                commands:
                  - pip install Jinja2==2.10.1
              build:
                commands:
                  - python -c "from jinja2 import Template;print(Template(open('product.template.{{ template_format }}.j2', 'r').read()).render())" > product.template.{{ template_format }}
            artifacts:
              files:
                - '*'
                - '**/*'

      TimeoutInMinutes: 20
{% endif %}

{% if Source.Provider.lower() == 'custom' %}
Outputs:
  WebhookUrl:
    Export:
      Name:
        !Sub "${AWS::StackName}-pipeline"
    Value:
{% if Source.Configuration.GitWebHookIpAddress is defined %}
      Fn::Sub:
        - ${GitUrl}||${WebhookUrl}
        - GitUrl:
            {{ Source.Configuration.GitUrl }}
          WebhookUrl:
            Fn::GetAtt:
              - Webhook
              - Url
{% else %}
      GitWebHookIpAddress was not defined in manifests Configuration
{% endif %}
{% endif %}