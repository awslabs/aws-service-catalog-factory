# Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

AWSTemplateFormatVersion: "2010-09-09"
Description: |
  Bootstrap template used to bring up the main ServiceCatalog-Factory AWS CodePipeline with dependencies
  {"version": "{{ VERSION }}", "framework": "servicecatalog-factory", "role": "bootstrap"}

Parameters:
  Version:
    Type: String
    Default: "{{ VERSION }}"

Resources:
  Param:
    Type: AWS::SSM::Parameter
    Properties:
      Name: service-catalog-factory-version
      Type: String
      Value: !Ref Version
      Tags:
        "ServiceCatalogFactory:Actor": "Framework"

  SourceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SourceRole
      Path: /servicecatalog-product-factory/
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
            Action:
              - "sts:AssumeRole"
          - Effect: "Allow"
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
      Tags:
        - Key: "ServiceCatalogFactory:Actor"
          Value: "Framework"

  CodeRepo:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryDescription: Repo to store the product factory config
      RepositoryName: ServiceCatalogFactory
      Tags:
        - Key: "ServiceCatalogFactory:Actor"
          Value: "Framework"

  BuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodeRole
      Path: /servicecatalog-product-factory/
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
      Tags:
        - Key: "ServiceCatalogFactory:Actor"
          Value: "Framework"

  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: servicecatalog-product-factory-build
      Description: "Converts the portfolios dir into pipelines"
      ServiceRole: !GetAtt BuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: linuxContainer
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                python: 3.x
              commands:
  {% if 'http' in VERSION %}
                - pip install {{ VERSION }}
  {% else %}
                - pip install aws-service-catalog-factory=={{ VERSION }}
  {% endif %}
            build:
              commands:
                - servicecatalog-factory --info generate-via-luigi portfolios/
          artifacts:
            files:
              - results/*/*
              - output/*/*
              - portfolios/*
            name: BuildOutput
      Tags:
        - Key: "ServiceCatalogFactory:Actor"
          Value: "Framework"
      TimeoutInMinutes: 60

  GenerateLaunchConstraintsProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: servicecatalog-product-factory-generate-launch-constraints
      Description: "Creates launch constraints for the portfolios"
      ServiceRole: !GetAtt BuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: linuxContainer
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                python: 3.x
              commands:
  {% if 'http' in VERSION %}
                - pip install {{ VERSION }}
  {% else %}
                - pip install aws-service-catalog-factory=={{ VERSION }}
  {% endif %}
            build:
              commands:
                - servicecatalog-factory --info generate-launch-constraints portfolios/
          artifacts:
            files:
              - results/*/*
              - output/*/*
              - output/constraints/launch-role/*.template.yaml
            name: GenerateLaunchConstraintsOutput
          Tags:
            - Key: "ServiceCatalogFactory:Actor"
              Value: "Framework"
          TimeoutInMinutes: 60


  CodePipelineTriggerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodePipelineTriggerRole
      Path: /servicecatalog-product-factory/
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "events.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: cwe-pipeline-execution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource: !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:*-pipeline"
      Tags:
        - Key: "ServiceCatalogFactory:Actor"
          Value: "Framework"

  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodePipelineRole
      Path: /servicecatalog-product-factory/
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Tags:
        - Key: "ServiceCatalogFactory:Actor"
          Value: "Framework"

  FactoryCloudFormationDeployRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: FactoryCloudFormationDeployRole
      Path: /servicecatalog-factory/
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "cloudformation.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Tags:
        - Key: "ServiceCatalogFactory:Actor"
          Value: "Framework"

  FactoryTemplateValidateBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: TRUE
        BlockPublicPolicy: TRUE
        IgnorePublicAcls: TRUE
        RestrictPublicBuckets: TRUE
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 2
            Status: Enabled
      Tags:
        - Key: "ServiceCatalogFactory:Actor"
          Value: "Framework"

  CatalogBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: TRUE
        BlockPublicPolicy: TRUE
        IgnorePublicAcls: TRUE
        RestrictPublicBuckets: TRUE
      Tags:
        - Key: "ServiceCatalogFactory:Actor"
          Value: "Framework"

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt PipelineRole.Arn
      Name: !Sub "${AWS::StackName}-pipeline"
      ArtifactStores:
        {% for region in ALL_REGIONS %}
        - Region: {{ region }}
          ArtifactStore:
            Type: S3
            Location: !Sub "sc-factory-pipeline-artifacts-${AWS::AccountId}-{{region}}"
        {% endfor %}
      RestartExecutionOnUpdate: true
      Stages:
        - Name: Source
          Actions:
            - Name: CodeCommit
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              Configuration:
                RepositoryName: !GetAtt CodeRepo.Name
                BranchName: master
              OutputArtifacts:
                - Name: Source
              RunOrder: 1
              RoleArn: !GetAtt SourceRole.Arn
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref BuildProject
              RunOrder: 1
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: BuildOutput
        - Name: GenerateConstraints
          Actions:
            - Name: GenerateLaunchConstraints
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref GenerateLaunchConstraintsProject
              RunOrder: 1
              InputArtifacts:
                - Name: BuildOutput
              OutputArtifacts:
                - Name: GeneratePortfolioConstraintsOutput
        - Name: DeployLaunchConstraints
          Actions:
          {% for region in ALL_REGIONS %}
          - Name: DeployLaunchConstraints-{{region}}
            Region: {{ region }}
            InputArtifacts:
              - Name: GeneratePortfolioConstraintsOutput
            ActionTypeId:
              Category: Deploy
              Owner: AWS
              Provider: CloudFormation
              Version: '1'
            Configuration:
              ActionMode: CREATE_UPDATE
              StackName: 'servicecatalog-factory-constraints-launch-role-{{ region }}'
              TemplatePath: "GeneratePortfolioConstraintsOutput::output/constraints/launch-role/{{ region }}.template.yaml"
              RoleArn: !GetAtt FactoryCloudFormationDeployRole.Arn
          {% endfor %}
      Tags:
        - Key: "ServiceCatalogFactory:Actor"
          Value: "Framework"




  DeliverySourceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: DeliverySourceRole
      Path: /servicecatalog-product-factory/
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
            Action:
              - "sts:AssumeRole"
          - Effect: "Allow"
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
      Tags:
        - Key: "ServiceCatalogFactory:Actor"
          Value: "Framework"

  DeliveryBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: DeliveryCodeRole
      Path: /servicecatalog-product-factory/
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
      Tags:
        - Key: "ServiceCatalogFactory:Actor"
          Value: "Framework"

  DeliveryPipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: DeliveryCodePipelineRole
      Path: /servicecatalog-product-factory/
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Tags:
        - Key: "ServiceCatalogFactory:Actor"
          Value: "Framework"

Outputs:
  CatalogBucketUrl:
    Value: !GetAtt CatalogBucket.WebsiteURL

  CatalogBucketName:
    Value: !Ref CatalogBucket

  Version:
    Value: !GetAtt Param.Value
