# Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

AWSTemplateFormatVersion: "2010-09-09"
Description: |
  Bootstrap template used to bring up the main ServiceCatalog-Factory AWS CodePipeline with dependencies
  {"version": "{{ VERSION }}", "framework": "servicecatalog-factory", "role": "bootstrap"}

Parameters:
  Version:
    Type: String
    Default: "{{ VERSION }}"

Resources:
  Param:
    Type: AWS::SSM::Parameter
    Properties:
      Name: service-catalog-factory-version
      Type: String
      Value: !Ref Version
      Tags:
        "ServiceCatalogFactory:Actor": "Framework"

  SourceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SourceRole
      Path: /servicecatalog-product-factory/
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
            Action:
              - "sts:AssumeRole"
          - Effect: "Allow"
            Principal:
              AWS: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess"
      Tags:
        - Key: "ServiceCatalogFactory:Actor"
          Value: "Framework"


  {% if Source.Provider.lower() == 'codecommit' %}
  CodeRepo:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryDescription: Repo to store the product factory config
      RepositoryName: {{ Source['Configuration']['RepositoryName'] }}
      Tags:
        - Key: "ServiceCatalogFactory:Actor"
          Value: "Framework"
  {% endif %}

  {% if Source.Provider.lower() == 's3' and create_repo %}
  S3Repo:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: {{ Source.Configuration.S3Bucket }}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: 'true'
        BlockPublicPolicy: 'true'
        IgnorePublicAcls: 'true'
        RestrictPublicBuckets: 'true'
      Tags:
        - Key: "ServiceCatalogFactory:Actor"
          Value: Framework
      VersioningConfiguration:
        Status: Enabled
  {% endif %}

  BuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodeRole
      Path: /servicecatalog-product-factory/
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess"
      Tags:
        - Key: "ServiceCatalogFactory:Actor"
          Value: "Framework"

  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: servicecatalog-product-factory-build
      Description: "Converts the portfolios dir into pipelines"
      ServiceRole: !GetAtt BuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: linuxContainer
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        EnvironmentVariables:
          - Name: PARTITION
            Type: PLAINTEXT
            Value: !Sub "${AWS::Partition}"
          - Name: ACCOUNT_ID
            Type: PLAINTEXT
            Value: !Sub "${AWS::AccountId}"
          - Name: REGION
            Type: PLAINTEXT
            Value: !Sub "${AWS::Region}"
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                python: 3.7
              commands:
  {% if 'http' in VERSION %}
                - pip install {{ VERSION }}
  {% else %}
                - pip install aws-service-catalog-factory=={{ VERSION }}
  {% endif %}
            build:
              commands:
                - servicecatalog-factory --info generate .
          artifacts:
            files:
              - '*'
              - '**/*'
            name: BuildOutput
      Tags:
        - Key: "ServiceCatalogFactory:Actor"
          Value: "Framework"
      TimeoutInMinutes: 480

  ValidateProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: servicecatalog-product-factory-validate
      Description: "Validates the portfolio yaml files"
      ServiceRole: !GetAtt BuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: linuxContainer
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        EnvironmentVariables:
          - Name: PARTITION
            Type: PLAINTEXT
            Value: !Sub "${AWS::Partition}"
          - Name: ACCOUNT_ID
            Type: PLAINTEXT
            Value: !Sub "${AWS::AccountId}"
          - Name: REGION
            Type: PLAINTEXT
            Value: !Sub "${AWS::Region}"
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                python: 3.7
              commands:
  {% if 'http' in VERSION %}
                - pip install {{ VERSION }}
  {% else %}
                - pip install aws-service-catalog-factory=={{ VERSION }}
  {% endif %}
            build:
              commands:
                - servicecatalog-factory --info validate .
          artifacts:
            files:
              - '*'
              - '**/*'
            name: ValidateOutput
      Tags:
        - Key: "ServiceCatalogFactory:Actor"
          Value: "Framework"
      TimeoutInMinutes: 480

  GenerateLaunchConstraintsProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: servicecatalog-product-factory-generate-launch-constraints
      Description: "Creates launch constraints for the portfolios"
      ServiceRole: !GetAtt BuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: linuxContainer
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        EnvironmentVariables:
          - Name: PARTITION
            Type: PLAINTEXT
            Value: !Ref AWS::Partition
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                python: 3.7
              commands:
  {% if 'http' in VERSION %}
                - pip install {{ VERSION }}
  {% else %}
                - pip install aws-service-catalog-factory=={{ VERSION }}
  {% endif %}
            build:
              commands:
                - servicecatalog-factory --info generate-launch-constraints portfolios/
                - servicecatalog-factory --info deploy-launch-constraints
          artifacts:
            files:
              - results/*/*
              - output/*/*
              - output/constraints/launch-role/*.template.yaml
            name: GenerateLaunchConstraintsOutput
          Tags:
            - Key: "ServiceCatalogFactory:Actor"
              Value: "Framework"
          TimeoutInMinutes: 60


  CodePipelineTriggerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodePipelineTriggerRole
      Path: /servicecatalog-product-factory/
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "events.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: cwe-pipeline-execution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource: !Sub "arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:*-pipeline"
      Tags:
        - Key: "ServiceCatalogFactory:Actor"
          Value: "Framework"

  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodePipelineRole
      Path: /servicecatalog-product-factory/
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Tags:
        - Key: "ServiceCatalogFactory:Actor"
          Value: "Framework"

  FactoryCloudFormationDeployRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: FactoryCloudFormationDeployRole
      Path: /servicecatalog-factory/
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "cloudformation.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Tags:
        - Key: "ServiceCatalogFactory:Actor"
          Value: "Framework"

  FactoryTemplateValidateBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: TRUE
        BlockPublicPolicy: TRUE
        IgnorePublicAcls: TRUE
        RestrictPublicBuckets: TRUE
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 2
            Status: Enabled
      Tags:
        - Key: "ServiceCatalogFactory:Actor"
          Value: "Framework"

  CatalogBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: TRUE
        BlockPublicPolicy: TRUE
        IgnorePublicAcls: TRUE
        RestrictPublicBuckets: TRUE
      Tags:
        - Key: "ServiceCatalogFactory:Actor"
          Value: "Framework"

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt PipelineRole.Arn
      Name: !Sub "${AWS::StackName}-pipeline"
      ArtifactStore:
        Type: S3
        Location: !Sub "sc-factory-pipeline-artifacts-${AWS::AccountId}-${AWS::Region}"
      RestartExecutionOnUpdate: true
      Stages:
        - Name: Source
          Actions:

            {% if Source.Provider.lower() == 'codestarsourceconnection' %}

            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: '1'
              Configuration:
                BranchName: {{ Source.Configuration.BranchName }}
                ConnectionArn: {{ Source.Configuration.ConnectionArn }}
                FullRepositoryId: {{ Source.Configuration.FullRepositoryId }}
                OutputArtifactFormat: {{ Source.Configuration.OutputArtifactFormat }}
              OutputArtifacts:
                - Name: Source
              RunOrder: '1'

            {% elif Source.Provider.lower() == 's3' %}

            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: '1'
              Configuration:
                S3Bucket: !Sub "{{ Source.Configuration.S3Bucket }}"
                S3ObjectKey: !Sub "{{ Source.Configuration.S3ObjectKey }}"
                PollForSourceChanges: {{ Source.Configuration.PollForSourceChanges }}
              OutputArtifacts:
                - Name: Source
              RunOrder: '1'

            {% else %}

            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: {% if Source.Provider.lower() == 'codecommit' %}AWS{% else %}ThirdParty{% endif %}
                Version: 1
                Provider: {{ Source.Provider }}
              {% if Source.Provider.lower() == 'codecommit' %}
              Configuration:
                RepositoryName: {{ Source.Configuration.RepositoryName }}
                BranchName: {{ Source.Configuration.BranchName }}
                PollForSourceChanges: {{ Source.Configuration.PollForSourceChanges or 'true' }}
              {% endif %}
              {% if Source.Provider.lower() == 'github' %}
              Configuration:
                Owner: {{ Source['Configuration']['Owner'] }}
                Repo: {{ Source['Configuration']['Repo'] }}
                Branch: {{ Source['Configuration']['Branch'] }}
                OAuthToken: !Sub '{{ '{% raw %}{{{% endraw %}' }}resolve:secretsmanager:{{ Source['Configuration']['SecretsManagerSecret'] }}:SecretString:OAuthToken{{ '{% raw %}}}{% endraw %}' }}'
                PollForSourceChanges: {{ Source['Configuration']['PollForSourceChanges'] }}
              {% endif %}
              OutputArtifacts:
                - Name: Source
              RunOrder: 1
              {% if Source.Provider.lower() == 'codecommit' %}RoleArn: !GetAtt SourceRole.Arn{% endif %}

            {% endif %}
        {% if should_validate %}
        - Name: Validate
          Actions:
            - Name: Validate
              ActionTypeId:
                Category: Test
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref ValidateProject
              RunOrder: 1
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: ValidateOutput
        {% endif %}

        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref BuildProject
              RunOrder: 1
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: BuildOutput
        - Name: GenerateConstraints
          Actions:
            - Name: GenerateLaunchConstraints
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref GenerateLaunchConstraintsProject
              RunOrder: 1
              InputArtifacts:
                - Name: BuildOutput
              OutputArtifacts:
                - Name: GeneratePortfolioConstraintsOutput
      Tags:
        - Key: "ServiceCatalogFactory:Actor"
          Value: "Framework"


  {% if Source.Provider.lower() == 'github' %}
  Webhook:
    Type: 'AWS::CodePipeline::Webhook'
    Properties:
      AuthenticationConfiguration:
        SecretToken: !Sub '{{ '{% raw %}{{{% endraw %}' }}resolve:secretsmanager:{{ Source['Configuration']['SecretsManagerSecret'] }}:SecretString:SecretToken{{ '{% raw %}}}{% endraw %}' }}'
      Filters:
          - JsonPath: "$.ref"
            MatchEquals: "refs/heads/{{ Source.Configuration.Branch }}"
      Authentication: GITHUB_HMAC
      TargetPipeline: !Ref Pipeline
      TargetAction: Source
      Name: !Sub "${AWS::StackName}-webhook"
      TargetPipelineVersion: !GetAtt Pipeline.Version
      RegisterWithThirdParty: 'true'
  {% endif %}

  DeliverySourceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: DeliverySourceRole
      Path: /servicecatalog-product-factory/
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
            Action:
              - "sts:AssumeRole"
          - Effect: "Allow"
            Principal:
              AWS: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess"
      Tags:
        - Key: "ServiceCatalogFactory:Actor"
          Value: "Framework"

  DeliveryBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: DeliveryCodeRole
      Path: /servicecatalog-product-factory/
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess"
      Tags:
        - Key: "ServiceCatalogFactory:Actor"
          Value: "Framework"

  DeliveryPipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: DeliveryCodePipelineRole
      Path: /servicecatalog-product-factory/
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Tags:
        - Key: "ServiceCatalogFactory:Actor"
          Value: "Framework"

Outputs:
  CatalogBucketUrl:
    Value: !GetAtt CatalogBucket.WebsiteURL

  CatalogBucketName:
    Value: !Ref CatalogBucket

  Version:
    Value: !GetAtt Param.Value
